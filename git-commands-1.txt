---------------------------------------------------GIT Commands-------------------------------------------------------
1) git status 						     -> prints the status of Git Repository.
2) git init 						     -> initializes the Git Repository.
3) git config --global user.name "rahulkevin"  		     -> Specify Username globally
4) git config --global user.email rahul.rahul.8118@gmail.com -> Specify Email globally
5) git config user.name "rahulkevin"  			     -> Specify Username for particular repository
6) git config user.email rahul.rahul.8118@gmail.com  	     -> Specify Email for particular repository
7) git add <filename> or *   				     -> Add file to staging environment
8) git commit -m ""     				     -> Commit file to local Git Repository
9) git log    						     -> Check file log history
10) git diff <filename>   				     -> Check changes made to file with existing file
11) git remote add origin <GitHub Repository URL>   	     -> Establish connection to the remote GitHub Repoistory
git remote add origin https://github.com/rahulkevin/git-sample-repo
12) cd git-demo-repo>git clone https://github.com/rahulkevin/git-sample-repo.git
-> First create new directory then goto that directory and run "git clone <GitHub Repository URL>"
13) git push -u origin master   			     -> Push to master branch
14) git pull  						     -> Pull from master branch
----------------------------------------------------------------------------------------------------------------------

GitHub Repository is also known as Remote repository


E:\Rahul\git-tutorial\git-sample-repo>git branch -a
* master
  remotes/origin/master

E:\Rahul\git-tutorial\git-sample-repo>git branch -r
  origin/master

E:\Rahul\git-tutorial\git-sample-repo>git branch
* master

E:\Rahul\git-tutorial\git-sample-repo>git remote show origin
* remote origin
  Fetch URL: https://github.com/rahulkevin/git-sample-repo.git
  Push  URL: https://github.com/rahulkevin/git-sample-repo.git
  HEAD branch: master
  Remote branch:
    master tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)

----------------------------------------------------------------------------------------------------------------------

Scenario 1:
First Release -> Done
Second Release
	2 features
	2 People
Third Release
	1 Feature
	1 Person

Create every differnt branch for every person, when work is done then merge the branch (of the person) to master branch then release

Scenario 2:
Two People

Person A -> Enhance the framework
Person B -> Automating testcases

testmethod1() -> getName()

Person A -> Merge code to master
Person B -> Pull from master to private branch, modify testcode based on new framework code which is done by Person A, merge code to master branch

