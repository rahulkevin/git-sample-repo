---------------------------------------------------GIT Commands-------------------------------------------------------
1) git status 						     -> prints the status of Git Repository.
2) git init 						     -> initializes the Git Repository.
3) git config --global user.name "rahulkevin"  		     -> Specify Username globally
4) git config --global user.email rahul.rahul.8118@gmail.com -> Specify Email globally
5) git config user.name "rahulkevin"  			     -> Specify Username for particular repository
6) git config user.email rahul.rahul.8118@gmail.com  	     -> Specify Email for particular repository
7) git add <filename> or *   				     -> Add file to staging environment
8) git commit -m ""     				     -> Commit file to local Git Repository
9) git log    						     -> Check file log history
10) git diff <filename>   				     -> Check changes made to file with existing file
11) git remote add origin <GitHub Repository URL>   	     -> Establish connection to the remote GitHub Repoistory
git remote add origin https://github.com/rahulkevin/git-sample-repo
12) cd git-demo-repo>git clone https://github.com/rahulkevin/git-sample-repo.git
-> First create new directory then goto that directory and run "git clone <GitHub Repository URL>"
13) git push -u origin master   			     -> Push to master branch
14) git pull  						     -> Pull from master branch
----------------------------------------------------------------------------------------------------------------------

GitHub Repository is also known as Remote repository


E:\Rahul\git-tutorial\git-sample-repo>git branch -a
* master
  remotes/origin/master

E:\Rahul\git-tutorial\git-sample-repo>git branch -r
  origin/master

E:\Rahul\git-tutorial\git-sample-repo>git branch
* master

E:\Rahul\git-tutorial\git-sample-repo>git remote show origin
* remote origin
  Fetch URL: https://github.com/rahulkevin/git-sample-repo.git
  Push  URL: https://github.com/rahulkevin/git-sample-repo.git
  HEAD branch: master
  Remote branch:
    master tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)

E:\Rahul\git-tutorial\git-sample-repo>git checkout -b privatebranch1   #We use only first time this command when need to create the privatebranch
Switched to a new branch 'privatebranch1'

E:\Rahul\git-tutorial\git-sample-repo>git checkout -b privatebranch2
Switched to a new branch 'privatebranch2'

E:\Rahul\git-tutorial\git-sample-repo>git checkout privatebranch1
M       git-commands-1.txt
Switched to branch 'privatebranch1'

E:\Rahul\git-tutorial\git-sample-repo>git status
On branch privatebranch1
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   git-commands-1.txt

no changes added to commit (use "git add" and/or "git commit -a")

E:\Rahul\git-tutorial\git-sample-repo>git add *

E:\Rahul\git-tutorial\git-sample-repo>git commit -m "Added branch scenarios 1 and 2"
[privatebranch1 48ec301] Added branch scenarios 1 and 2
 1 file changed, 24 insertions(+)

E:\Rahul\git-tutorial\git-sample-repo>git push origin privatebranch1		# this step will switch the branch to privatebranch1
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 631 bytes | 315.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0 (from 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
remote:
remote: Create a pull request for 'privatebranch1' on GitHub by visiting:
remote:      https://github.com/rahulkevin/git-sample-repo/pull/new/privatebranch1
remote:
To https://github.com/rahulkevin/git-sample-repo.git
 * [new branch]      privatebranch1 -> privatebranch1

E:\Rahul\git-tutorial\git-sample-repo>git checkout privatebranch2		# this step will switch the branch to privatebranch2
Switched to branch 'privatebranch2'

E:\Rahul\git-tutorial\git-sample-repo>git status
On branch privatebranch2
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   git-commands-1.txt

no changes added to commit (use "git add" and/or "git commit -a")

E:\Rahul\git-tutorial\git-sample-repo>git add *

E:\Rahul\git-tutorial\git-sample-repo>git commit -m "Added branch scenarios 3"
[privatebranch2 62bcae8] Added branch scenarios 3
 1 file changed, 68 insertions(+)

E:\Rahul\git-tutorial\git-sample-repo>git push origin privatebranch2
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 519 bytes | 519.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0 (from 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
remote:
remote: Create a pull request for 'privatebranch2' on GitHub by visiting:
remote:      https://github.com/rahulkevin/git-sample-repo/pull/new/privatebranch2
remote:
To https://github.com/rahulkevin/git-sample-repo.git
 * [new branch]      privatebranch2 -> privatebranch2

E:\Rahul\git-tutorial\git-sample-repo>git checkout master		# this step will switch the barnch to master branch
Switched to branch 'master'
Your branch is up to date with 'origin/master'.

E:\Rahul\git-tutorial\git-sample-repo>git branch
* master
  privatebranch1
  privatebranch2

E:\Rahul\git-tutorial\git-sample-repo>git pull origin master		# this step will pull the data of master branch
From https://github.com/rahulkevin/git-sample-repo
 * branch            master     -> FETCH_HEAD
Already up to date.

E:\Rahul\git-tutorial\git-sample-repo>git merge privatebranch1		# this step merge the data of privatebranch1 to master branch
Updating 1f62698..48ec301
Fast-forward
 git-commands-1.txt | 24 ++++++++++++++++++++++++
 1 file changed, 24 insertions(+)

E:\Rahul\git-tutorial\git-sample-repo>git push origin master    	# this step push the data of privatebranch1 to master branch
Total 0 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
To https://github.com/rahulkevin/git-sample-repo.git
   1f62698..48ec301  master -> master

E:\Rahul\git-tutorial\git-sample-repo>git checkout privatebranch2	# this step will switch the branch to privatebranch2
Switched to branch 'privatebranch2'

E:\Rahul\git-tutorial\git-sample-repo>git pull origin master		# this step will pull the data of master branch
From https://github.com/rahulkevin/git-sample-repo
 * branch            master     -> FETCH_HEAD
Auto-merging git-commands-1.txt
CONFLICT (content): Merge conflict in git-commands-1.txt		# merge is failed because privatebranch1 data is already present in master branch
Automatic merge failed; fix conflicts and then commit the result.	# so master branch is confused where to add privatebranch2 data in master branch
									# open the file and adjust the data properly and save it




----------------------------------------------------------------------------------------------------------------------

Scenario 1:
First Release -> Done
Second Release
	2 features
	2 People
Third Release
	1 Feature
	1 Person

Create every differnt branch for every person, when work is done then merge the branch (of the person) to master branch then release

Scenario 2:
Two People

Person A -> Enhance the framework
Person B -> Automating testcases

testmethod1() -> getName()

Person A -> Merge code to master
Person B -> Pull from master to private branch, modify testcode based on new framework code which is done by Person A, merge code to master branch
>>>>>>> 48ec30174d37a605d095179c70034c56f34ebce6

Scenario 3:
1 Person -> Two different features
Work on different branches

		   PrivateBranch1-------------------------
		   |					 |
		   |					 |
		   |					 |
-----------------Master-----------Release1--------------Master------------------Master--------------Release2----------Master----------
		  |								|
		  |								|Pull code from master and then merge his code to master
		  PrivateBranch2-------------------------------------------------

